syntax = "proto3";
package org.phenopackets.schema.v1.core;

//import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

//option java_package = "org.phenopackets.api.v1.core";
option java_multiple_files = true;
//option java_outer_classname = "PhenoPacket";

message MetaData {
    // timestamp for when this phenopacket was created
    google.protobuf.Timestamp created = 1;
    // some kind of identifier for the contributor/ program
    string created_by = 2;
    // a listing of the ontologies referenced in the phenopacket
    repeated Ontology ontologies = 3;
}

message Ontology {
    // for OBO Ontologies, the value of this string MUST always be the official
    // OBO ID, which is always equivalent to the ID prefix in lower case.
    // Examples: hp, go, mp, mondo
    // Consult http://obofoundry.org for a complete list
    // For other ontologies (e.g SNOMED), use the prefix in identifiers.org
    string id = 1;
    // e.g. The Human Phenotype Ontology
    // for OBO Ontologies, the value of this string SHOULD be the same as the title
    // field on http://obofoundry.org
    // however, this field is purely for information purposes and software
    // should not encode any assumptions
    string name = 2;
    // The prefix used in the CURIE e.g. HP, MP, ECO
    string namespace_prefix = 3;
    
    // For OBO ontologies, this should always be the PURL, e.g.
    // http://purl.obolibrary.org/obo/hp.owl, http://purl.obolibrary.org/obo/hp.obo
    string url = 4;
    
    // for OBO ontologies, this should be the versionIRI
    string version = 5;
}

// A class (aka term, concept) in an ontology
message OntologyClass {
    // a CURIE-style identifier e.g. HP:0100024, MP:0001284, UBERON:0001690.
    // This is the primary key for the ontology class
    // REQUIRED?
    string id = 1;
    
    // class label, aka name. E.g. "Abnormality of cardiovascular system"
    string label = 2;
}

// An individual phenotypic feature, observed as either present or absent (negated), with possible onset, modifiers and
// frequency
message Phenotype {
    // Free-text description of the phenotype. Note this is not a acceptable place to document/describe the phenotype -
    // the type and onset etc... fields should be used for this purpose.
    string description = 1;

    // The primary ontology class which describes the phenotype. For example "HP:0001363"  "Craniosynostosis"
    OntologyClass type = 2;
    bool is_negated = 3;

    // the values of this will come from the HPO onset hierarchy
    // i.e. subclasses of HP:0003674
    OntologyClass onset = 4;

    // subclasses of HP:0012823 ! Clinical modifier 
    repeated OntologyClass modifiers = 5;
    OntologyClass assay = 6;
    // subclasses of HP:0040279 ! Frequency
    // TODO: make this a distinct message with number, count and percentage as well as general ontology class?
    OntologyClass frequency = 7;

    repeated Evidence evidence = 11;
    //Measurement
    //Environment
}

// TODO: remodel this to use SEPIO? https://github.com/monarch-initiative/SEPIO-ontology
message Evidence {
    OntologyClass eco = 1;
    Publication publication = 2;
    //TODO alternatively a map of finding or something
    //repeated Measurement/ Observation here? this would link to FHIR
    //e.g. https://www.hl7.org/fhir/observation.html
}

message Publication {
    //e.g. ISBN, PMID:123456, DOI:...
    string id = 1;
    string title = 2;
}

// Defines a relationship between two individuals as referred to by their identifiers and an ontology term defining the
// relationship between the two entities.
message Relationship {
    string source_id = 1;
    // An ontology term/class used to describe the relationship between the source and the target, for example
    // "contained in" http://purl.obolibrary.org/obo/RO_0001018
    OntologyClass relationship_class = 2;
    string target_id = 3;
}

// An individual (or subject) typically corresponds to an individual
// human or another organism.
message Individual {
    // An identifer for the individual. This must be unique within the record.
    string id = 1;
    // The date of birth of the individual - rounded down to the closest known year/month/day/hour/minute
    // e.g. "2018-03-01T00:00:00Z" for someone born on an unknown day in March 2018
    // or "2018-01-01T00:00:00Z" for someone born on an unknown day in 2018
    // or empty if unknown/ not stated.
    google.protobuf.Timestamp date_of_birth = 2;
    // A PATO term for the biological sex of the individual
    // http://purl.obolibrary.org/obo/PATO_0000047
    OntologyClass sex = 3;

    repeated Phenotype phenotypes = 4;

    // The time at which this Individual's record was created.
    google.protobuf.Timestamp created = 5;

    // The time at which this Individual record was updated.
    google.protobuf.Timestamp updated = 6;
}

// See https://github.com/ga4gh-metadata/metadata-schemas/blob/d4ca1b4b36a5e7b3a17db79da9ae03a2114cfcaf/schemas/biometadata.proto#L84-L138
// A Biosample refers to a unit of biological material from which the substrate
// molecules (e.g. genomic DNA, RNA, proteins) for molecular analyses (e.g.
// sequencing, array hybridisation, mass-spectrometry) are extracted. Examples
// would be a tissue biopsy, a single cell from a culture for single cell genome
// sequencing or a protein fraction from a gradient centrifugation.
// Several instances (e.g. technical replicates) or types of experiments (e.g.
// genomic array as well as RNA-seq experiments) may refer to the same Biosample.
message Biosample {

//TODO: should all this id, dataset_id, name... fields repeated in Individual be encapsulated in another message?
    // The Biosample id This is unique in the
    // context of the server instance.
    string id = 1;

    // The ID of the dataset this Biosample belongs to.
    string dataset_id = 2;

    // The Biosample's name This is a label or symbolic identifier for the biosample.
    string name = 3;

    // The biosample's description. This attribute contains human readable text.
    // The "description" attributes should not contain any structured data.
    string description = 4;

    // characteristics object uses lists of Phenotype objects to describe
    // diseases, phenotypes, source ... associated with this BioSample.
    repeated Phenotype phenotypes = 5;

    // The :ref:`ISO 8601<metadata_date_time>` time at which this Biosample record
    // was created.
    google.protobuf.Timestamp created = 6;

    // The :ref:`ISO 8601<metadata_date_time>` time at which this Biosample record was
    // updated.
    google.protobuf.Timestamp updated = 7;

    // The id of the individual this biosample was derived from.
    string individual_id = 8;

    // A map of additional information about the Biosample.
    // Attributes attributes = 10;

    // External identifiers representing this biosample. These are considered
    // different representation of the same record, not records which are in some
    // other relation with the record at hand.
    // repeated ExternalIdentifier external_identifiers = 11;

    // An age object describing the age of the individual this biosample was
    // derived from at the time of collection. The Age object allows the encoding
    // of the age either as ISO8601 duration or time interval (preferred), or
    // as ontology term object.
    // Example:
    //   "individual_age_at_collection": {
    //     "age": "P12Y0M",
    //     "age_class": {
    //         "term": "Juvenile onset",
    //         "term_id": "HP:0003621"
    //     }
    // },
    //TODO:
    //    Age individual_age_at_collection = 12;
    //TODO:
    // The address coded as GeoLocation where the biosample was collected.
    //    GeoLocation location = 13;

}

// https://software.broadinstitute.org/gatk/documentation/article?id=11016
message Pedigree {
    repeated Family families = 1;

    message Family {
        string id = 1;
        repeated Person persons = 2;
    }

    message Person {
        enum Sex {
        UNKNOWN = 0;
        MALE = 1;
        FEMALE = 2;
    }
        enum AffectedStatus {
        MISSING = 0;
        UNAFFECTED = 1;
        AFFECTED = 2;
    }
        string family_id = 1;
        string individual_id = 2;
        string paternal_id = 3;
        string maternal_id = 4;
        Sex sex = 5;
        AffectedStatus affected_status = 6;
    }
}

message File {
    // Full system path to the file. e.g. /data/genomes/file1.vcf.gz
    string path = 1;
    // URI for the file e.g. file://data/genomes/file1.vcf.gz or https://opensnp.org/data/60.23andme-exome-vcf.231?1341012444
    string uri = 2;
}

message Disease {
    // The identifier of this disease e.g. MONDO:0007043, OMIM:101600, Orphanet:710, DOID:14705 (note these are all equivalent)
    string id = 1;
    // Textual name of the disease e.g. Pfeiffer syndrome
    string label = 2;
    // Free-text description
    string description = 3;
    // The mode of inheritance for this disease, in preference a sub-class of http://purl.obolibrary.org/obo/HP_0000005
    OntologyClass modeOfInheritance = 4;
    // The disease phenotype
    repeated Phenotype phenotypes = 5;

    OntologyClass onset = 6;
}

// Human genome reference assembly - major version
enum GenomeAssembly {
    option allow_alias = true;
    //  defaulted to GRCh37 as this is more common than NCBI36?
    GRCH_37 = 0;
    HG_19 = 0;

    NCBI_36 = 1;
    HG_18 = 1;

    GRCH_38 = 2;
    HG_38 = 2;
}

// TODO: Look at how GEL do this sort of thing in their InterpretedGenome
message GenomicFeature {
    Gene gene = 1;
    repeated Variant variant = 2;
    VariantAnnotation variant_annotation = 3;
}

// TODO: perhaps this would be better as a GeneticFeature which would wrap 1-N variants. This would make it easier to group comp-het alleles.
// TODO:  Alternatively create a Genotype{gene: Gene, repeated alleles: Variant}
message Gene {
    // a CURIE with a prefix that is NCBIGene, HGNC, ENSEMBL, UCSC e.g. HGNC:347, ENSG00000120705, uc003ldc.6
    // https://www.genenames.org/cgi-bin/gene_symbol_report?q=data/hgnc_data.php&hgnc_id=HGNC:3477
    string id = 1;
    // The official gene symbol as designated by the organism gene nomenclature committee e.g. ETF1 or Etf1
    string symbol = 2;
    // Taxonomy id from the NCBI e.g. NCBI:txid9606
    // https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?mode=Info&id=9606
    int32 ncbi_taxon_id = 3;
}

// Placeholder message in SPDI format (https://www.ncbi.nlm.nih.gov/variation/notation/)
// Subject to change - this could be replaced with a GA4GH Variant Representation when finalised by the working group.
// See: https://docs.google.com/document/d/1Sulg3kECnorTEAbutINOsK-lFkKAcKpl6IHgPaPQEgA
// TODO use Beacon variant representation?
// See: https://github.com/ga4gh-beacon/specification/blob/master/beacon.yaml
message Variant {
    // genome assmebly isn't strictly necessary if using the sequence accession as that will be unique for the assembly/sequence
    GenomeAssembly genome_assembly = 1;
    // do we want to consider explicitly defining strand and zero/one-based coordinates?
    // Accession of the sequence e.g. NC_000010.10 (GRCh37 chromosome 10)
    string sequence = 2;
    // zero-based sequence position
    int32 position = 3; //start, end...
    // Deleted bases on the forward strand - equivalent to the VCF REF
    string deletion = 6;
    // Inserted bases on the forward strand - equivalent to the VCF ALT
    string insertion = 7;
    //type of genotype of this variant, using class from GENO ontology
    OntologyClass genotype_class = 8;
    // TODO: This might be better combined in an InterpretedVariant/ AnnotatedVariant message
    // however, it's not required so its absence isn't an issue. On positive side having the annotation associated with
    // the variant directly makes it easier to work with.
    VariantAnnotation variant_annotation = 9;
}

// Placeholder message subject to change with outcome of GA4GH variant annotation working group.
// See: https://docs.google.com/document/d/13sSChUB9rW7vl1ep-tZnaDzSWb_MyWIvSzEFVS32quE
message VariantAnnotation {
    enum AcmgClassification {
        UNCERTAIN_SIGNIFICANCE = 0;
        LIKELY_BENIGN = 2;
        BENIGN = 3;
        LIKELY_PATHOGENIC = 4;
        PATHOGENIC = 5;
    }
    // Subclass of the Sequence Ontology http://purl.obolibrary.org/obo/so.owl
    OntologyClass variant_effect = 1;
    // Variant interpretation code from https://www.acmg.net/docs/Standards_Guidelines_for_the_Interpretation_of_Sequence_Variants.pdf
    AcmgClassification acmg_classification = 2;
    //  e.g. PVS1, BP7 (should make an enum for these?)
    repeated string acmg_code = 3;
}

// EXAMPLES - THESE ARE NOT PART OF THE SCHEMA
// https://beacon-network.org/#/developers/api/beacon-network#bn-response
message BeaconRequest {
    Variant variant = 1;
    //repeated Phenotype phenotype = 2; Beacon 2.0!
}

// https://beacon-network.org/#/developers/api/beacon-network#bn-response
message BeaconResponse {
    Variant variant = 1;
    bool response = 2;

}

// Genomics England InterpretedGenomeRD
// https://github.com/genomicsengland/GelReportModels/blob/master/schemas/IDLs/org.gel.models.report.avro/5.0.0/InterpretedGenomesRD.avdl
message InterpretedGenome {
    string id = 1;
    string title = 2;
    string description = 3;
    GenomeAssembly genome_assembly = 4;
    repeated GenomicFeature genomic_features = 6;
}
